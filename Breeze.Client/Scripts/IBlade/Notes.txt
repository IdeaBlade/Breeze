Action
------
1) Register a ctor via  MetadataStore.registerEntityTypeCtor ( or implicitly create one) - implementation logic for this step is largely modelLibrary specific
		a) discovers any unmapped properties
		b) initializes the entity prototype ( add the "setProperty" and "getProperty" methods) + and may do other work depending on the model library.
		c) Hooks up property interception

2) Basic query materialization - This is what a no-tracking EntityQuery will do. Returns simple javascript objects with "namingConventions" and datatype conversions
 applied and cycles resolved.
		1) property name changes
		2) resolve cycles
		3) datatype conversion based on metadata

3) Associate an EntityAspect with an Entity - via new EntityAspect(instance)
		a) attaches an entityAspect to the entity
		b) starts tracking - ( adapt's any instance level properties to appropriate model library).

4) Create an entity via an entityType - using entityType.createEntity
		a) calls the "registered" ctor - ( one will be created if none is registered) to create an entity instance
		    1) This is ALL that calling new with a registered ctor will do.
		b) Initializes any values from a config object passed in.
		c) runs any registered initialization fn on the newly constructed instance.
		d) Attaches an EntityAspect ( step 3 above )

5) Attach an entity to the EntityManager

-  Step's involves in a standard query

	1) Query materialization  (step 2)
	2) create an entity using materialized object for configuration (step 4)
	3a) attach an entity to an entityManager
		or 
	3b) merge a raw entity into an existing entity on the entityManager


Notes: 

var instance = new Foo();
instance = breeze.core.extend(instance, configObject);
var x = new EntityAspect(instance);

is "roughly" the same as

em.metadataStore.getEntityType("Foo").createEntity(configObject);



 