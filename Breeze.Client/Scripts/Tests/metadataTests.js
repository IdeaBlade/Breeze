(function (testFns) {
    var breeze = testFns.breeze;
    var core = breeze.core;
    

    var EntityType = breeze.EntityType;
    var MetadataStore = breeze.MetadataStore;
    var EntityManager = breeze.EntityManager;
    var NamingConvention = breeze.NamingConvention;
    var EntityQuery = breeze.EntityQuery;
    var DataService = breeze.DataService;
    

    var newEm = testFns.newEm;

    function newAltEm() {
        var altServiceName = "breeze/MetadataTest";

        var dataService = new DataService({
            serviceName: altServiceName,
        });
        var altMs = new MetadataStore({
            // namingConvention: NamingConvention.camelCase
        });

        return new EntityManager({
            dataService: dataService,
            metadataStore: altMs
        });
    }


    module("metadata", {
        setup: function () {
            testFns.setup({ noMetadata: true }); //We don't need to set up metadata for these tests, because they do it themselves.
        },
        teardown: function () {

        }
    });

    test("create metadata add entity Type", function () {
        var store = new MetadataStore();
        var eto = {}
        eto.shortName = "type1";
        eto.namespace = "mod1";
        eto.dataProperties = new Array();
        eto.autoGeneratedKeyType = breeze.AutoGeneratedKeyType.Identity;

        var dpo = {};
        dpo.name = "id";
        dpo.dataType = breeze.DataType.Int32;
        dpo.isNullable = false;
        dpo.isPartOfKey = true;

        var dp = new breeze.DataProperty(dpo);
        eto.dataProperties.push(dp);

        dpo = {};
        dpo.name = "prop1";
        dpo.dataType = breeze.DataType.Int32;
        dpo.isNullable = false;
        dpo.isPartOfKey = false;

        dp = new breeze.DataProperty(dpo);
        eto.dataProperties.push(dp);            

        var et = new breeze.EntityType(eto);
        store.addEntityType(et);
        ok(et.metadataStore === store, "should have set the metadataStore prop");
    });

    test("create metadata add entity Type - v2", function () {
        var store = new MetadataStore();
        var eto = {}
        eto.shortName = "type1";
        eto.namespace = "mod1";
        eto.dataProperties = new Array();
        eto.autoGeneratedKeyType = breeze.AutoGeneratedKeyType.Identity;
        var et = new breeze.EntityType(eto);

        var dpo = {};
        dpo.name = "id";
        dpo.dataType = breeze.DataType.Int32;
        dpo.isNullable = false;
        dpo.isPartOfKey = true;

        var dp = new breeze.DataProperty(dpo);
        et.addProperty(dp);

        dpo = {};
        dpo.name = "prop1";
        dpo.dataType = breeze.DataType.Int32;
        dpo.isNullable = false;
        dpo.isPartOfKey = false;

        dp = new breeze.DataProperty(dpo);
        et.addProperty(dp);

        store.addEntityType(et);
        
        ok(et.metadataStore === store, "should have set the metadataStore prop");
    });

    test("external customer metadata", function () {
        if (testFns.DEBUG_ODATA) {
            ok(true, "Skipped tests - not applicable to OData");
            return;
        };

        if (testFns.DEBUG_MONGO) {
            ok(true, "Skipped tests - not applicable to Mongo yet");
            return;
        };

        var em = newAltEm();
        stop();
        em.fetchMetadata().then(function (rawMetadata) {
            var ms = em.metadataStore;
            ets = ms.getEntityTypes();
            ok(ets.length > 0, "should be some entityTypes");
        }).fail(testFns.handleFail).fin(start);
    });

    test("default interface impl", function() {
        var store = new MetadataStore();
        stop();
        store.fetchMetadata(testFns.serviceName).then(function() {
            ok(!store.isEmpty());
        }).fail(testFns.handleFail).fin(start);
    });

    test("getEntityType informative error message1", function () {
        var store = new MetadataStore();
        var em = new EntityManager({ serviceName: testFns.serviceName, metadataStore: store });

        try {
            var customer = em.createEntity("Customer", { customerID: breeze.core.getUuid() });
            ok(false, "Shouldn't get here");
        } catch (err) {
            ok(err.message.indexOf("fetchMetadata") !== -1, "The error message should say to ensure metadata is fetched.");
        }
    });

    test("getEntityType informative error message2", function () {
        var store = new MetadataStore();
        var em = new EntityManager({ serviceName: testFns.serviceName, metadataStore: store });

        try {
            var productType = em.metadataStore.getEntityType("Customer");
            ok(false, "Shouldn't get here");
        } catch (err) {
            ok(err.message.indexOf("fetchMetadata") !== -1, "The error message should say to ensure metadata is fetched.");
        }
    });
    
    test("initialization", function () {

        if (testFns.DEBUG_MONGO) {
            ok(true, "N/A for Mongo - Current impl provides camelCase naming convention on the server");
            return;
        }

        var store = new MetadataStore({ namingConvention: NamingConvention.none } );
        stop();
        var dataServiceAdapter = core.config.getAdapterInstance("dataService");
        var dataService = new breeze.DataService({ serviceName: testFns.serviceName });
        dataServiceAdapter.fetchMetadata(store, dataService).then(function() {
            try {
                var typeMap = store._structuralTypeMap;
                var types = objectValues(typeMap);
                ok(types.length > 0);
                var custType = store.getEntityType("Customer");
                var props = custType.dataProperties;
                ok(props.length > 0);
                var keys = custType.keyProperties;
                ok(keys.length > 0);
                var prop = custType.getProperty("CompanyName");
                ok(prop, "fails if default naming convention is camelCase and metadata provides nameOnServer");
                ok(prop.isDataProperty);
                var navProp = custType.navigationProperties[0];
                ok(navProp.isNavigationProperty);
                var notProp = custType.getProperty("foo");
                ok(!notProp);
                
                
            } catch(e) {
                ok(false, "shouldn't fail except if using server side json metadata file.");
            }
        }).fail(testFns.handleFail).fin(start);
    });

    test("initialize only once", function() {
        var store = new MetadataStore();
        var em = new EntityManager({ serviceName: testFns.serviceName, metadataStore: store });
        stop();
        store.fetchMetadata(testFns.serviceName).then(function () {
            ok(!store.isEmpty());
            ok(store.hasMetadataFor(testFns.serviceName));
            ok(em.metadataStore.hasMetadataFor(em.serviceName), "manager serviceName is not the same as the metadataStore name");

        }).fail(testFns.handleFail).fin(start);
    });

    test("initialization concurrent", 2, function () {

        var store = new MetadataStore();
        var sc = new testFns.StopCount(2);
        var typeMap;
        var errFn = function (e) {
            ok(false, e);
        };
        var dataServiceAdapter = core.config.getAdapterInstance("dataService");
        var dataService = new breeze.DataService({ serviceName: testFns.serviceName });
        
        var p1 = dataServiceAdapter.fetchMetadata(store, dataService).then(function () {
            typeMap = store._structuralTypeMap;
            ok(true, "should get here");

        });
        var p2 = dataServiceAdapter.fetchMetadata(store, dataService).then(function () {
            typeMap = store._structuralTypeMap;
            ok(true, "should also get here");
            
        });
        Q.all([p1, p2]).fail(errFn).fin(start);
    });

    function importMetadataWithInheritance (metadataJson) {
        var store = new MetadataStore({ namingConvention: breeze.NamingConvention.none });
        store.importMetadata(metadataJson);
        var em = new EntityManager({ metadataStore: store });
        var apple = em.createEntity("Apple", { Variety: "Jonathan", Name: "Apple", Id: 23 });
        ok(apple.entityAspect.entityState === breeze.EntityState.Added);
        ok(apple.getProperty("Variety") === "Jonathan");
        ok(apple.getProperty("Name") === "Apple");
        ok(apple.getProperty("Id") === 23);
    }

    test("importMetadata - metadataItemFruitApple", function () {
        importMetadataWithInheritance(metadataItemFruitApple)
    });
    test("importMetadata - metadataAppleFruitItem", function () {
        importMetadataWithInheritance(metadataAppleFruitItem)
    });
    test("importMetadata - metadataFruitAppleItem", function () {
        importMetadataWithInheritance(metadataFruitAppleItem)
    });

    function objectValues(obj, deep) {
        deep = deep || false;
        var result = [];
        for (var name in obj) {
            if (deep || obj.hasOwnProperty(name)) {
                result.push(obj[name]);
            }
        }
        return result;
    }


    var appleType = {
        "shortName": "Apple",
        "namespace": "Models.Produce",
        "baseTypeName": "Fruit:#Models.Produce",
        "autoGeneratedKeyType": "None",
        "defaultResourceName": "Apples",
        "dataProperties": [
          {
              "nameOnServer": "Variety",
              "dataType": "String",
              "isNullable": true,
              "maxLength": 50,
              "validators": [
                {
                    "maxLength": "50",
                    "name": "maxLength"
                }
              ]
          }
        ],
        "navigationProperties": []
    };
    var fruitType = {
        "shortName": "Fruit",
        "namespace": "Models.Produce",
        "baseTypeName": "ItemOfProduce:#Models.Produce",
        "autoGeneratedKeyType": "None",
        "defaultResourceName": "Fruits",
        "dataProperties": [
          {
              "nameOnServer": "Name",
              "dataType": "String",
              "isNullable": false,
              "maxLength": 50,
              "validators": [
                {
                    "name": "required"
                },
                {
                    "maxLength": "50",
                    "name": "maxLength"
                }
              ]
          }
        ],
        "navigationProperties": []
    };
    var itemOfProduceType = {
        "shortName": "ItemOfProduce",
        "namespace": "Models.Produce",
        "autoGeneratedKeyType": "None",
        "defaultResourceName": "ItemsOfProduce",
        "dataProperties": [
          {
              "nameOnServer": "Id",
              "dataType": "Int32",
              "isNullable": false,
              "isPartOfKey": true,
              "validators": [
                {
                    "name": "required"
                },
                {
                    "name": "int32"
                }
              ]
          }
        ],
        "navigationProperties": []
    };
    var resourceEntityTypeMap = {
        "Apples": "Apple:#Models.Produce",
        "Fruits": "Fruit:#Models.Produce",
        "ItemsOfProduce": "ItemOfProduce:#Models.Produce"
    };


    var metadataItemFruitApple = {
        "localQueryComparisonOptions": "caseInsensitiveSQL",
        "structuralTypes": [itemOfProduceType, fruitType, appleType],
        "resourceEntityTypeMap": resourceEntityTypeMap
    };
    var metadataAppleFruitItem = {
        "localQueryComparisonOptions": "caseInsensitiveSQL",
        "structuralTypes": [ appleType, fruitType, itemOfProduceType ],
        "resourceEntityTypeMap": resourceEntityTypeMap
    };
    var metadataFruitAppleItem = {
        "localQueryComparisonOptions": "caseInsensitiveSQL",
        "structuralTypes": [fruitType, appleType, itemOfProduceType],
        "resourceEntityTypeMap": resourceEntityTypeMap
    };


})(breezeTestFns);