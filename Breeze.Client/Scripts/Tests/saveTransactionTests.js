(function (testFns) {
    var breeze = testFns.breeze;
    var core = breeze.core;


    var Enum = core.Enum;

    var MetadataStore = breeze.MetadataStore;
    var EntityManager = breeze.EntityManager;
    var AutoGeneratedKeyType = breeze.AutoGeneratedKeyType;
    var SaveOptions = breeze.SaveOptions;
    var EntityQuery = breeze.EntityQuery;
    var EntityKey = breeze.EntityKey;
    var EntityState = breeze.EntityState;
    var FilterQueryOp = breeze.FilterQueryOp;

    var newEm = testFns.newEm;

    var wellKnownData = testFns.wellKnownData;

    module("saveTransaction", {
        setup: function () {
            testFns.setup({
                metadataFn: function () {
                    var regionType = testFns.metadataStore.getEntityType("Region");
                    regionType.setProperties({ autoGeneratedKeyType: AutoGeneratedKeyType.KeyGenerator });
                    var territoryType = testFns.metadataStore.getEntityType("Territory");
                    territoryType.setProperties({ autoGeneratedKeyType: AutoGeneratedKeyType.KeyGenerator });
                }
            });
        },
        teardown: function () { }
    });


    function saveOrderAndAddShipAddressToComment(resourceName) {
        if (testFns.DEBUG_ODATA) {
            ok(true, "Skipped test - OData does not support server interception or alt resources");
            return;
        };

        if (testFns.DEBUG_MONGO) {
            ok(true, "NA for Mongo - server side 'test' logic not yet implemented");
            return;
        }

        var em = newEm();
        var testAddress = "Test " + new Date().toISOString();

        var order = em.createEntity('Order', {
            customerID: wellKnownData.alfredsID,
            employeeID: wellKnownData.nancyID,
            shipAddress: testAddress
        });
        var saveOptions = new SaveOptions({ resourceName: resourceName, tag: "CommentOrderShipAddress.Before" });
        stop();
        em.saveChanges(null, saveOptions).then(function (data) {
            // BeforeSaveEntities should have put the testAddress in a comment
            var em2 = newEm();
            var q = EntityQuery.from("Comments").where("comment1", "==", testAddress);
            return em2.executeQuery(q);
        }).then(function (data) {
            var results = data.results;
            ok(results.length === 1, "should have returned 1 result");
            var comment = results[0];
            var comment1 = comment.getProperty("comment1");
            ok(comment1 === testAddress, "comment should equal testAddress");

        }).fail(testFns.handleFail).fin(start);
    }

    test("save Order and add ShipAddress to Comment in BeforeSave - SaveWithNoTransaction", function () {
        saveOrderAndAddShipAddressToComment("SaveWithNoTransaction");
    });
    test("save Order and add ShipAddress to Comment in BeforeSave - SaveWithDbTransaction", function () {
        saveOrderAndAddShipAddressToComment("SaveWithDbTransaction");
    });
    test("save Order and add ShipAddress to Comment in BeforeSave - SaveWithTransactionScope", function () {
        saveOrderAndAddShipAddressToComment("SaveWithTransactionScope");
    });

    function saveOrderAndUpdateShipAddressBeforeSave(resourceName) {
        if (testFns.DEBUG_ODATA) {
            ok(true, "Skipped test - OData does not support server interception or alt resources");
            return;
        };

        if (testFns.DEBUG_MONGO) {
            ok(true, "NA for Mongo - server side 'test' logic not yet implemented");
            return;
        }

        var em = newEm();
        var testAddress = "Test " + new Date().toISOString();

        var order = em.createEntity('Order', {
            customerID: wellKnownData.alfredsID,
            employeeID: wellKnownData.nancyID,
            shipAddress: testAddress
        });
        var saveOptions = new SaveOptions({ resourceName: resourceName, tag: "UpdateProduceShipAddress.Before" });
        stop();
        em.saveChanges(null, saveOptions).then(function (data) {
            // BeforeSaveEntities should have put the testAddress in the description of an Apple
            var emx = new EntityManager({ serviceName: "breeze/ProduceTPH" });
            var q = EntityQuery.from("Apples").where("description", "==", testAddress);
            return emx.executeQuery(q);
        }).then(function (data) {
            var results = data.results;
            ok(results.length === 1, "should have returned 1 result");
            var produce = results[0];
            var desc = produce.getProperty("description");
            ok(desc === testAddress, "description should equal testAddress");

        }).fail(testFns.handleFail).fin(start);
    }

    test("save Order and update ShipAddress in ProduceTPH in BeforeSave - SaveWithNoTransaction", function () {
        saveOrderAndUpdateShipAddressBeforeSave("SaveWithNoTransaction");
    });
    test("save Order and update ShipAddress in ProduceTPH in BeforeSave - SaveWithDbTransaction", function () {
        saveOrderAndUpdateShipAddressBeforeSave("SaveWithDbTransaction");
    });
    test("save Order and update ShipAddress in ProduceTPH in BeforeSave - SaveWithTransactionScope - DTC", function () {
        saveOrderAndUpdateShipAddressBeforeSave("SaveWithTransactionScope");
    });

    function saveOrderAddKeyMappingToCommentAfterSave(resourceName) {
        if (testFns.DEBUG_ODATA) {
            ok(true, "Skipped test - OData does not support server interception or alt resources");
            return;
        };

        if (testFns.DEBUG_MONGO) {
            ok(true, "NA for Mongo - server side 'test' logic not yet implemented");
            return;
        }

        var em = newEm();
        var testComment;
        var order = em.createEntity('Order', {
            customerID: wellKnownData.alfredsID,
            employeeID: wellKnownData.nancyID,
            shipAddress: "Test " + new Date().toISOString()
        });
        var saveOptions = new SaveOptions({ resourceName: resourceName, tag: "CommentKeyMappings.After" });
        stop();
        em.saveChanges(null, saveOptions).then(function (data) {
            // AfterSaveEntities should have put the order type and id in a comment
            var orderId = order.getProperty("orderID");
            var type = order.entityType;
            testComment = type.namespace + '.' + type.shortName + ':' + orderId;

            var em2 = newEm();
            var q = EntityQuery.from("Comments").where("comment1", "==", testComment);
            return em2.executeQuery(q);
        }).then(function (data) {
            var results = data.results;
            ok(results.length === 1, "should have returned 1 result");
            var comment = results[0];
            var comment1 = comment.getProperty("comment1");
            ok(comment1 === testComment, "comment should equal testComment");

        }).fail(testFns.handleFail).fin(start);
    }

    test("save Order and add KeyMapping to Comment in AfterSave - SaveWithNoTransaction", function () {
        saveOrderAddKeyMappingToCommentAfterSave("SaveWithNoTransaction");
    });
    test("save Order and add KeyMapping to Comment in AfterSave - SaveWithDbTransaction", function () {
        saveOrderAddKeyMappingToCommentAfterSave("SaveWithDbTransaction");
    });
    test("save Order and add KeyMapping to Comment in AfterSave - SaveWithTransactionScope", function () {
        saveOrderAddKeyMappingToCommentAfterSave("SaveWithTransactionScope");
    });

    function saveOrderUpdateKeyMappingInProduceTPHAfterSave(resourceName) {
        if (testFns.DEBUG_ODATA) {
            ok(true, "Skipped test - OData does not support server interception or alt resources");
            return;
        };

        if (testFns.DEBUG_MONGO) {
            ok(true, "NA for Mongo - server side 'test' logic not yet implemented");
            return;
        }

        var em = newEm();
        var testComment;
        var order = em.createEntity('Order', {
            customerID: wellKnownData.alfredsID,
            employeeID: wellKnownData.nancyID,
            shipAddress: "Test " + new Date().toISOString()
        });
        var saveOptions = new SaveOptions({ tag: "UpdateProduceKeyMapping.After" });
        stop();
        em.saveChanges(null, saveOptions).then(function (data) {
            // AfterSaveEntities should have put the order type and id in the description of an Apple
            var orderId = order.getProperty("orderID");
            var type = order.entityType;
            testComment = type.namespace + '.' + type.shortName + ':' + orderId;

            var emx = new EntityManager({ serviceName: "breeze/ProduceTPH" });
            var q = EntityQuery.from("Apples").where("description", "==", testComment);
            return emx.executeQuery(q);
        }).then(function (data) {
            var results = data.results;
            ok(results.length === 1, "should have returned 1 result");
            var produce = results[0];
            var desc = produce.getProperty("description");
            ok(desc === testComment, "description should equal testComment");

        }).fail(testFns.handleFail).fin(start);
    }

    test("save Order and update KeyMapping in ProduceTPH in AfterSave - SaveWithNoTransaction", function () {
        saveOrderUpdateKeyMappingInProduceTPHAfterSave("SaveWithNoTransaction");
    });
    test("save Order and update KeyMapping in ProduceTPH in AfterSave - SaveWithDbTransaction", function () {
        saveOrderUpdateKeyMappingInProduceTPHAfterSave("SaveWithDbTransaction");
    });
    test("save Order and update KeyMapping in ProduceTPH in AfterSave - SaveWithTransactionScope", function () {
        saveOrderUpdateKeyMappingInProduceTPHAfterSave("SaveWithTransactionScope");  // DTC iff database != SQL 2008+
    });

    function saveOrderWithLookupInSecondContext(resourceName, tag) {
        if (testFns.DEBUG_ODATA) {
            ok(true, "Skipped test - OData does not support server interception or alt resources");
            return;
        };

        if (testFns.DEBUG_MONGO) {
            ok(true, "NA for Mongo - server side 'test' logic not yet implemented");
            return;
        }

        var em = newEm();
        var testComment;
        var order = em.createEntity('Order', {
            customerID: wellKnownData.alfredsID,
            employeeID: wellKnownData.nancyID,
            shipAddress: "Test " + new Date().toISOString()
        });
        var saveOptions = new SaveOptions({ resourceName: resourceName, tag: tag });
        stop();
        em.saveChanges(null, saveOptions).then(function (data) {
            // should have put the order type and id in a comment
            var orderId = order.getProperty("orderID");
            var employeeId = order.getProperty("employeeID");
            ok(employeeId == wellKnownData.nancyID);

        }).fail(testFns.handleFail).fin(start);
    }

    test("save Order with lookup in second Context in BeforeSave - SaveWithNoTransaction", function () {
        saveOrderWithLookupInSecondContext("SaveWithNoTransaction", "LookupEmployeeInSeparateContext.Before");
    });
    test("save Order with lookup in second Context in BeforeSave - SaveWithDbTransaction", function () {
        saveOrderWithLookupInSecondContext("SaveWithDbTransaction", "LookupEmployeeInSeparateContext.Before");
    });
    test("save Order with lookup in second Context in BeforeSave - SaveWithTransactionScope - DTC", function () {
        saveOrderWithLookupInSecondContext("SaveWithTransactionScope", "LookupEmployeeInSeparateContext.Before");
    });

    test("save Order with lookup in second Context in BeforeSave - Same Connection - SaveWithNoTransaction", function () {
        saveOrderWithLookupInSecondContext("SaveWithNoTransaction", "LookupEmployeeInSeparateContext.SameConnection.Before");
    });
    test("save Order with lookup in second Context in BeforeSave - Same Connection- SaveWithDbTransaction", function () {
        saveOrderWithLookupInSecondContext("SaveWithDbTransaction", "LookupEmployeeInSeparateContext.SameConnection.Before");
    });
    test("save Order with lookup in second Context in BeforeSave - Same Connection- SaveWithTransactionScope", function () {
        saveOrderWithLookupInSecondContext("SaveWithTransactionScope", "LookupEmployeeInSeparateContext.SameConnection.Before");
    });

    test("save Order with lookup in second Context in AfterSave - SaveWithNoTransaction", function () {
        saveOrderWithLookupInSecondContext("SaveWithNoTransaction", "LookupEmployeeInSeparateContext.After");
    });
    test("save Order with lookup in second Context in AfterSave - SaveWithDbTransaction", function () {
        saveOrderWithLookupInSecondContext("SaveWithDbTransaction", "LookupEmployeeInSeparateContext.After");
    });
    test("save Order with lookup in second Context in AfterSave - SaveWithTransactionScope - DTC", function () {
        saveOrderWithLookupInSecondContext("SaveWithTransactionScope", "LookupEmployeeInSeparateContext.After");
    });

    test("save Order with lookup in second Context in AfterSave - Same Connection- SaveWithNoTransaction", function () {
        saveOrderWithLookupInSecondContext("SaveWithNoTransaction", "LookupEmployeeInSeparateContext.SameConnection.After");
    });
    test("save Order with lookup in second Context in AfterSave - Same Connection- SaveWithDbTransaction", function () {
        saveOrderWithLookupInSecondContext("SaveWithDbTransaction", "LookupEmployeeInSeparateContext.SameConnection.After");
    });
    test("save Order with lookup in second Context in AfterSave - Same Connection- SaveWithTransactionScope", function () {
        saveOrderWithLookupInSecondContext("SaveWithTransactionScope", "LookupEmployeeInSeparateContext.SameConnection.After");
    });


})(breezeTestFns);